[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "sylis-speech-service"
version = "1.0.0"
description = "Sylis Speech Service - WeNet-based pronunciation assessment"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Sylis Team"}
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
]
requires-python = ">=3.8"
dependencies = [
    "fastapi==0.115.0",
    "uvicorn[standard]==0.30.6",
    "python-multipart>=0.0.5",
    "torch>=1.13.0",
    "torchaudio>=0.13.0",
    "numpy>=1.21.0",
    "librosa>=0.9.0",
    "soundfile>=0.12.0",
    "scipy>=1.9.0",
    "requests>=2.28.0",
    "pyyaml>=6.0.0",
    "urllib3>=1.26.0",
    "g2p_en>=2.1.0",
]

[project.optional-dependencies]
wenet = [
    "wenet @ git+https://github.com/wenet-e2e/wenet.git"
]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
]

[project.scripts]
sylis-speech = "sylis_speech_service.cli:main"

[project.urls]
Homepage = "https://github.com/sylis/speech-service"
Repository = "https://github.com/sylis/speech-service.git"
Issues = "https://github.com/sylis/speech-service/issues"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
"sylis_speech_service" = ["config/*.yaml", "data/*.txt"]

[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = [
    "tests",
]
filterwarnings = [
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.mypy]
python_version = "3.8"
check_untyped_defs = true
ignore_missing_imports = true
warn_unused_ignores = true
warn_redundant_casts = true
warn_unused_configs = true

